      function preloadImage() {
        for (var i = 1; i <= frames.maxIndex; i++) {
          const imageUrl = `./compressed_images/frame_${String(i).padStart(4, "0")}.jpg`;
          const img = new Image();
          img.src = imageUrl;
          img.onload = () => {
            imagesLoaded++;
            if (imagesLoaded === frames.maxIndex) {
              loadImage(frames.currentIndex);
              startAnimation();
            }
          };
          images.push(img);
        }
      }

      function loadImage(index) {
        if (index >= 0 && index <= frames.maxIndex) {
          const img = images[index];

    
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;

          const scaleX = canvas.width / img.width;
          const scaleY = canvas.height / img.height;
          const scale = Math.max(scaleX, scaleY);

          const newWidth = img.width * scale;
          const newHeight = img.height * scale;

        

          const offsetX = (canvas.width - newWidth) / 2;
          const offsetY = (canvas.height - newHeight) / 2;

          context.clearRect(0, 0,window.innerWidth, window.innerHeight);
          context.imageSmoothingEnabled = true;
          context.imageSmoothingQuality = "high";
          context.drawImage(img, offsetX, offsetY, newWidth, newHeight);

          frames.currentIndex = index;
        }
      }

      function startAnimation() {
        var tl = gsap.timeline({
          scrollTrigger: {
            trigger: ".parent", // the element that triggers the animation
            start: "top top", // start the animation when the top of the trigger reaches the top of the viewport
            scrub: 2, // smooth out the animation based on scroll progress
            end: "bottom bottom", // end the animation when the bottom of the trigger reaches the bottom of the viewport
          },
        });

        tl.to(frames, {
          currentIndex: frames.maxIndex, // animate from the current frame index to the maximum index
          onUpdate: function () {
            loadImage(Math.floor(frames.currentIndex)); // load the frame corresponding to the current index
          },
        });
      }